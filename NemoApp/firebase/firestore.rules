rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isSelf(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // users/{uid}
    // Read: user can read self; admins can read anyone
    // Update: user can only change name/profilePicture (and updatedAt). Creation is server-side.
    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();

      allow create: if false; // created via backend Admin SDK only

      allow update: if isSelf(uid)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['name','profilePicture','updatedAt']);
    }

    // events/{eventId}
    // Publicly readable. Modifications only by admin (server or admin client).
    match /events/{eventId} {
      allow read: if true;

      allow create, update, delete: if isAdmin();
    }

    // bookings/{bookingId}
    // Created by signed-in users; updates/deletes disabled (server controls state).
    match /bookings/{bookingId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // friendRequests/{id}
    // Create by signed-in users; only the recipient can update (accept/reject).
    match /friendRequests/{id} {
      allow create: if isSignedIn();

      allow read: if isSignedIn() && (
          resource.data.fromUserId == request.auth.uid ||
          resource.data.toUserId == request.auth.uid
        ) || isAdmin();

      allow update: if isSignedIn() && resource.data.toUserId == request.auth.uid;
    }

    // suggestions/{id}
    // Create by any signed-in user; only admins can list/read all.
    match /suggestions/{id} {
      allow create: if isSignedIn();
      allow read: if isAdmin();
      allow update, delete: if false;
    }
  }
}